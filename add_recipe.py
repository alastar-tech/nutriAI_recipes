# -*- coding: utf-8 -*-
"""–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ë–î.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u6E60Hj_zvrhNII02s_MmkpiXvMKcxEJ
"""



import streamlit as st
import json
import pandas as pd
from datetime import datetime

#—É–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
st.set_option('client.showErrorDetails', False)


st.set_page_config(page_title="–ú–æ–∏ –ü–ü –†–µ—Ü–µ–ø—Ç—ã", page_icon="üç≥")

def main():
    st.title("üìñ –ë–∞–∑–∞ –º–æ–∏—Ö –ü–ü —Ä–µ—Ü–µ–ø—Ç–æ–≤")

    tab1, tab2, tab3 = st.tabs(["üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã", "üíæ –≠–∫—Å–ø–æ—Ä—Ç"])

    with tab1:
        add_recipe_form()

    with tab2:
        view_recipes()

    with tab3:
        export_data()

def add_recipe_form():
    with st.form("recipe_form", clear_on_submit=True):
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞*")
            category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è*", ["", "–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω", "—Å–∞–ª–∞—Ç", "—Å—É–ø", "–¥–µ—Å–µ—Ä—Ç", "–ø–µ—Ä–µ–∫—É—Å"])
            cooking_time = st.number_input("–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (–º–∏–Ω)*", min_value=1, max_value=300)

        with col2:
            cuisine = st.selectbox("–ö—É—Ö–Ω—è", ["", "—Ä—É—Å—Å–∫–∞—è", "—Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è", "–∞–∑–∏–∞—Ç—Å–∫–∞—è", "–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è"])
            difficulty = st.select_slider("–°–ª–æ–∂–Ω–æ—Å—Ç—å", ["–ª–µ–≥–∫–æ", "—Å—Ä–µ–¥–Ω–µ", "—Å–ª–æ–∂–Ω–æ"])
            servings = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π", min_value=1, max_value=10, value=2)

        # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        st.subheader("–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã")
        ingredients = []

        ing_col1, ing_col2, ing_col3, ing_col4 = st.columns([3, 1, 1, 2])
        with ing_col1:
            ing_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞")
        with ing_col2:
            ing_amount = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=0.0, step=0.5)
        with ing_col3:
            ing_unit = st.selectbox("–ï–¥.–∏–∑–º", ["–≥", "–º–ª", "—à—Ç", "—Å—Ç.–ª.", "—á.–ª.", "—Å—Ç–∞–∫–∞–Ω", "—â–µ–ø–æ—Ç–∫–∞"])
        with ing_col4:
            ing_category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["–∫—Ä—É–ø—ã", "–æ–≤–æ—â–∏", "—Ñ—Ä—É–∫—Ç—ã", "–±–µ–ª–∫–∏", "–∂–∏—Ä—ã", "–º–æ–ª–æ—á–∫–∞", "—Å–ø–µ—Ü–∏–∏"])

        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç") and ing_name:
            ingredients.append({
                "name": ing_name,
                "amount": ing_amount,
                "unit": ing_unit,
                "category": ing_category
            })
            st.success(f"–î–æ–±–∞–≤–ª–µ–Ω: {ing_name}")

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        if ingredients:
            st.write("**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
            for i, ing in enumerate(ingredients):
                st.write(f"{i+1}. {ing['amount']} {ing['unit']} {ing['name']} ({ing['category']})")

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        st.subheader("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
        instructions = st.text_area(
            "–û–ø–∏—à–∏—Ç–µ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è*",
            placeholder="–ö–∞–∂–¥—ã–π —à–∞–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n1. –®–∞–≥ –ø–µ—Ä–≤—ã–π...\n2. –®–∞–≥ –≤—Ç–æ—Ä–æ–π...",
            height=150
        )

        # –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
        st.subheader("–ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ –ø–æ—Ä—Ü–∏—é)")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            calories = st.number_input("–ö–∞–ª–æ—Ä–∏–∏*", min_value=0, value=250)
        with col2:
            protein = st.number_input("–ë–µ–ª–∫–∏ (–≥)", min_value=0.0, value=0.0)
        with col3:
            carbs = st.number_input("–£–≥–ª–µ–≤–æ–¥—ã (–≥)", min_value=0.0, value=0.0)
        with col4:
            fats = st.number_input("–ñ–∏—Ä—ã (–≥)", min_value=0.0, value=0.0)

        # –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
        st.subheader("–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
        dietary_tags = st.multiselect(
            "–¢–µ–≥–∏",
            ["–≤—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤—ã–π", "–Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω—ã–π", "–Ω–∏–∑–∫–æ–∂–∏—Ä–æ–≤–æ–π", "–±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞",
             "–±–µ–∑ –ª–∞–∫—Ç–æ–∑—ã", "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π", "–≤–µ–≥–∞–Ω—Å–∫–∏–π", "–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω—ã–π"]
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç"):
            if not name or not category or not instructions:
                st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–æ—Ç–º–µ—á–µ–Ω—ã *)")
            else:
                recipe = {
                    "name": name,
                    "category": category,
                    "cuisine": cuisine,
                    "difficulty": difficulty,
                    "servings": servings,
                    "cooking_time": cooking_time,
                    "ingredients": ingredients,
                    "instructions": [inst.strip() for inst in instructions.split('\n') if inst.strip()],
                    "nutrition": {
                        "calories": calories,
                        "protein": protein,
                        "carbs": carbs,
                        "fats": fats
                    },
                    "dietary_tags": dietary_tags,
                    "created_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                }

                save_recipe(recipe)
                st.success("‚úÖ –†–µ—Ü–µ–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

def save_recipe(recipe):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open('my_recipes.json', 'r', encoding='utf-8') as f:
            recipes = json.load(f)
    except FileNotFoundError:
        recipes = []

    recipes.append(recipe)

    with open('my_recipes.json', 'w', encoding='utf-8') as f:
        json.dump(recipes, f, ensure_ascii=False, indent=2)

def view_recipes():
    st.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã")
    try:
        with open('my_recipes.json', 'r', encoding='utf-8') as f:
            recipes = json.load(f)

        if not recipes:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            return

        for i, recipe in enumerate(recipes):
            with st.expander(f"üç≥ {recipe['name']} ({recipe['category']})"):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**–ö—É—Ö–Ω—è:** {recipe.get('cuisine', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    st.write(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {recipe['difficulty']}")
                    st.write(f"**–í—Ä–µ–º—è:** {recipe['cooking_time']} –º–∏–Ω")
                    st.write(f"**–ü–æ—Ä—Ü–∏–∏:** {recipe['servings']}")

                with col2:
                    st.write(f"**–ö–∞–ª–æ—Ä–∏–∏:** {recipe['nutrition']['calories']} –∫–∫–∞–ª")
                    st.write(f"**–ë–µ–ª–∫–∏:** {recipe['nutrition']['protein']}–≥")
                    st.write(f"**–ñ–∏—Ä—ã:** {recipe['nutrition']['fats']}–≥")
                    st.write(f"**–£–≥–ª–µ–≤–æ–¥—ã:** {recipe['nutrition']['carbs']}–≥")

                st.write("**–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**")
                for ing in recipe['ingredients']:
                    st.write(f"- {ing['amount']} {ing['unit']} {ing['name']}")

                st.write("**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**")
                for j, step in enumerate(recipe['instructions']):
                    st.write(f"{j+1}. {step}")

                if recipe['dietary_tags']:
                    st.write("**–¢–µ–≥–∏:** " + ", ".join(recipe['dietary_tags']))

    except FileNotFoundError:
        st.info("–§–∞–π–ª —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def export_data():
    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

    try:
        with open('my_recipes.json', 'r', encoding='utf-8') as f:
            recipes = json.load(f)

        if not recipes:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # JSON —ç–∫—Å–ø–æ—Ä—Ç
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å JSON",
            data=json.dumps(recipes, ensure_ascii=False, indent=2),
            file_name="my_recipes.json",
            mime="application/json"
        )

        # CSV —ç–∫—Å–ø–æ—Ä—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        df_data = []
        for recipe in recipes:
            df_data.append({
                'name': recipe['name'],
                'category': recipe['category'],
                'cooking_time': recipe['cooking_time'],
                'calories': recipe['nutrition']['calories'],
                'ingredients_count': len(recipe['ingredients']),
                'dietary_tags': ', '.join(recipe['dietary_tags'])
            })

        if df_data:
            df = pd.DataFrame(df_data)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å CSV",
                data=df.to_csv(index=False, encoding='utf-8'),
                file_name="my_recipes.csv",
                mime="text/csv"
            )

    except FileNotFoundError:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

if __name__ == "__main__":
    main()

